//1. Pokaż graczy, którzy posiadają gry strategiczne i zwróć ich imiona, nazwiska, lokalizacje oraz tytuły i daty wydania gier strategicznych, które posiadają.

MATCH(p:Person)-[:OWNS]->(g:Game)-[:ISTYPE]->(t:Type{Name: 'Strategy'})
RETURN
p.Name AS PlayerName,
p.LastName AS PlayerLastName,
p.From AS PlayerFrom,
COLLECT(g.Title + ', ' + g.ReleaseDate) AS Games
ORDER BY p.LastName, p.Name

//2. Pokaż gry z kategorii fantasy i sprawdź, które z nich są najbardziej popularne opierając się na ilości osób posiadających je, chcących w nie zagrać lub chcących je kupić, a następnie
//ułóż je w kolejności od największej do najmniejszej opierając się na wyliczonej popularności i zwróć ich tytuły, daty wydania i wskaźnik popularności.

MATCH(p:Person)-[:OWNS|:WANTSTOBUY|:WANTSTOPLAY]->(g:Game)-[:ISCATEGORY]->(c:Category{Name:'Fantasy'})
WITH g, COUNT(p) AS Popularity
RETURN
g.Title AS GameTitle,
g.ReleaseDate AS GameReleaseDate,
Popularity
ORDER BY Popularity DESC LIMIT 3

//3. Pokaż gry które posiada konkretny gracz i połącz je z artystami, którzy te gry stworzyli. Następnie dołącz do tych artystów inne gry, które stworzyli, a któych nie posiadał gracz.
//Zwróć tytuły gier posiadanych przez gracza, ich typ oraz kategorie, artystę który stworzył te gry oraz sugerowane inne gry wraz z ich danymi stworzonymi przez tego samego artystę.

MATCH(p:Person{Name:'Bob', LastName:'Johnson'})-[:OWNS]->(ga:Game)<-[:CREATED]-(a:Person)-[:CREATED]->(gb:Game), (ga)-[:ISTYPE]->(ta:Type), (ga)-[:ISCATEGORY]->(ca:Category),(gb)-[:ISTYPE]->(tb:Type), (gb)-[:ISCATEGORY]->(cb:Category)
WHERE NOT (p)-[:OWNS]-(gb)
RETURN
ga.Title AS OwnedGameTitle,
collect(distinct ta.Name) AS OwnedGameType,
collect(distinct ca.Name) AS OwnedGameCategory,
a.Name +' ' + a.LastName AS Artist,
gb.Title AS SuggestedGameTitle,
collect(distinct tb.Name) AS SuggestedGameType,
collect(distinct cb.Name) AS SuggestedGameCategory
ORDER BY Artist, OwnedGameTitle

//4. Pokaż gry, które konkretny gracz chce kupić i połącz je z osobami, które te gry sprzedają. Opcjonalnie przefiltruj gry po ich stanie używalności (nowe lub używane).
//Zwróć tytuły gier danymi osób, które je sprzedają, stanem gry oraz ich ceną.

MATCH(p:Person{Name:'Emily', LastName:'Late'})-[:WANTSTOBUY]->(g:Game)<-[wts:WANTSTOSELL]-(s:Person)
//WHERE wts.condition = 'used' OR wts.condition = 'new'
RETURN
g.Title AS GameTitle, 
wts.for AS GamePrice,
wts.condition AS GameCondition,
s.Name + ' ' + s.LastName AS SellerName,
s.From AS SellerLocation
ORDER BY GameTitle, GamePrice, GameCondition

//5. Pokaż kategorie gier, w które gra konkretny gracz i połącz je z innymi osobami, które grają w gry o podobnych kategoriach. Sprawdź ilość podobieństw, a następnie zwróć
//trzech sugerowanych przyjaciół z największą ilością podobieństw oraz kategoriami, które są wspólne dla obu graczy.

MATCH (p:Person{Name:'Timothy', LastName: 'Fairwell'})-[:OWNS|:WANTSTOPLAY]->(g:Game), (g)-[:ISCATEGORY]->(c:Category), 
(f:Person)-[:OWNS|:WANTSTOPLAY]->(gf:Game), (gf)-[:ISCATEGORY]->(cf:Category)
WHERE c.Name = cf.Name AND NOT id(p) = id(f) 
RETURN 
f.Name+ ' ' + f.LastName AS SuggestedFriend,
COLLECT(distinct c.Name) AS SimilarCategories,
COUNT(distinct cf) AS Similarities
ORDER BY
Similarities DESC LIMIT 3

//6. Pokaż wydawców gier i połącz je z grami, które wydali. Przefiltruj wydawców po liczbie wydanych gier (więcej niż dwie), a następnie połącz gry ze swoimi projektantami.
// Zwróć wydawców, gry i projektantów by sprawdzić, dla ilu wydawców pracowali dani projektanci.

MATCH (p:Publisher)-[:PUBLISHED]->(g:Game)
WITH p, COUNT(g) AS NumberOfGames
MATCH (p)-[:PUBLISHED]->(g)<-[:DESIGNED]-(d:Person)
WHERE NumberOfGames >=2 AND NOT (g)-[:EXPANSION]->()
RETURN p, g, d